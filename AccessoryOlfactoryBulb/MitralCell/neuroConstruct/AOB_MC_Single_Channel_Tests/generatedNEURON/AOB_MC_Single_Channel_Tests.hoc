//  ******************************************************
// 
//     File generated by: neuroConstruct v1.7.1
// 
//  ******************************************************

{load_file("nrngui.hoc")}

//  Initialising stopwatch for timing setup

{startsw()}

print ""
print "*****************************************************"
print ""
print "    neuroConstruct generated NEURON simulation "
print "    for project: /home/Simon/Channel_Kinetics/AccessoryOlfactoryBulb/MitralCell/neuroConstruct/AOB_MC_Single_Channel_Tests/AOB_MC_Single_Channel_Tests.ncx "
print ""
print "    Description: "
print ""
print "    Simulation Configuration: SimConfig: Default Simulation Configuration "
print "    This is the default configuration of the Cell Groups, stimulations, plots, etc for this project "
print " "
print  "*****************************************************"

strdef pwd
{system("pwd", pwd)}
print ""
print "Current working dir: ", pwd

objectvar allCells
{allCells = new List()}


//  A flag to signal simulation was generated by neuroConstruct 

{nC = 1}


//  Including neuroConstruct utilities file 

{load_file("nCtools.hoc")}

//  Including neuroConstruct cell check file 

{load_file("cellCheck.hoc")}

//  Getting hostname

objref strFuncs
{strFuncs = new StringFunctions()}
strdef host
{system("hostname", host)}
if (strFuncs.len(host)>0) {
    strFuncs.left(host, strFuncs.len(host)-1) 
} else {
    host = "????" 
}


//  Simulation running in serial mode, setting default host id

{hostid = 0}


//  Initializes random-number generator

{use_mcell_ran4(1)}

{mcell_ran4_init(1465189653)}

//////////////////////////////////////////////////////////////////////
//   Cell group 0: CellGroup_0 has cells of type: iMC1_cell_1_origin
//////////////////////////////////////////////////////////////////////


//  Adding cell template file: iMC1_cell_1_origin.hoc for cell group CellGroup_0

{ load_file("iMC1_cell_1_origin.hoc") }

//  Adding 1 cells of type iMC1_cell_1_origin in region Regions_1

{n_CellGroup_0 = 1}

{n_CellGroup_0_local = 0 } // actual number created on this host

objectvar a_CellGroup_0[n_CellGroup_0]

proc addCell_CellGroup_0() {
    strdef reference
    sprint(reference, "CellGroup_0_%d", $1)
    a_CellGroup_0[$1] = new iMC1_cell_1_origin(reference, "iMC1_cell_1_origin", "This is an AOB mitral cell that exhibited intrinsic oscillations  reconstructed using Imaris confocal microscope software by Katja Watznauer  cell split from iMC1 as:  iMC1_cell_1  Imaris exported file name:  130918_MC_labelled_slice1_oscillating_MC_d1.ims.hoc")
    allCells.append(a_CellGroup_0[$1])
}

for i = 0, n_CellGroup_0-1 {
    addCell_CellGroup_0(i)
    n_CellGroup_0_local = n_CellGroup_0_local +1 

}


//  Placing these cells in a region described by: Rectangular Box from point: (0.0, 0.0, 0.0) to (120.0, 50.0, 120.0)


//  Packing has been generated by: Random: num: 1, edge: 1, overlap: 1, other overlap: 1

{a_CellGroup_0[0].position(24.803846,36.207245,73.94558)}





//////////////////////////////////////////////////////////////////////
//   Setting initial parameters
//////////////////////////////////////////////////////////////////////

strdef simConfig
{simConfig = "Default Simulation Configuration"}
{celsius = 35.0}



proc initialiseValues0() {


//  Setting initial vals in cell group: CellGroup_0 which has 1 cells


//  Giving all cells an initial potential of: -74.1

    for i = 0, n_CellGroup_0-1 {
        forsec a_CellGroup_0[i].all  v = -74.1

    }

}

objref fih0
{fih0 = new FInitializeHandler(0, "initialiseValues0()")}



//////////////////////////////////////////////////////////////////////
//   Adding Network Connections
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//   Adding 0 stimulation(s)
//////////////////////////////////////////////////////////////////////


access iMC1_cell_1_origin[0].filament_100000001_0

//////////////////////////////////////////////////////////////////////
//   Settings for running the demo
//////////////////////////////////////////////////////////////////////


tstop = 10000.0
dt = 0.025
steps_per_ms = 40.0

//////////////////////////////////////////////////////////////////////
//   Adding 8 plot(s)
//////////////////////////////////////////////////////////////////////


//   This code pops up a plot of a_CellGroup_0[0].filament_100000001_0.v(0.04017303)

objref CellGroup_0_v
CellGroup_0_v = new Graph(0)
{CellGroup_0_v.size(0, tstop,-90.0,50.0)}
{CellGroup_0_v.view(0, -90.0, tstop, 140.0, 80, 330, 330, 250)}
{
    CellGroup_0_v.addexpr("a_CellGroup_0[0].filament_100000001_0.v", "a_CellGroup_0[0].filament_100000001_0.v(0.04017303)", 1, 1, 0.8, 0.9, 2)
    graphList[0].append(CellGroup_0_v)
}

//   This code pops up a plot of a_CellGroup_0[0].filament_100000001_0.cai(0.04017303)

objref GraphWin_0
GraphWin_0 = new Graph(0)
{GraphWin_0.size(0, tstop,0.0,0.2)}
{GraphWin_0.view(0, 0.0, tstop, 0.2, 80, 330, 330, 250)}
{
    GraphWin_0.addexpr("a_CellGroup_0[0].filament_100000001_0.cai", "a_CellGroup_0[0].filament_100000001_0.cai(0.04017303)", 1, 1, 0.8, 0.9, 2)
    graphList[0].append(GraphWin_0)
}

//   This code pops up a plot of a_CellGroup_0[0].filament_100000001_0.gion_NaP_iAMC_ChannelML(0.04017303)

objref GraphWin_15
GraphWin_15 = new Graph(0)
{GraphWin_15.size(0, tstop,-0.002,0.001)}
{GraphWin_15.view(0, -0.002, tstop, 0.003, 80, 330, 330, 250)}
{
    GraphWin_15.addexpr("a_CellGroup_0[0].filament_100000001_0.gion_NaP_iAMC_ChannelML", "a_CellGroup_0[0].filament_100000001_0.gion_NaP_iAMC_ChannelML(0.04017303)", 1, 1, 0.8, 0.9, 2)
    graphList[0].append(GraphWin_15)
}

//   This code pops up a plot of a_CellGroup_0[0].filament_100000001_0.gion_NaxSH10_ChannelML(0.04017303)

objref GraphWin_16
GraphWin_16 = new Graph(0)
{GraphWin_16.size(0, tstop,-0.025,0.025)}
{GraphWin_16.view(0, -0.025, tstop, 0.05, 80, 330, 330, 250)}
{
    GraphWin_16.addexpr("a_CellGroup_0[0].filament_100000001_0.gion_NaxSH10_ChannelML", "a_CellGroup_0[0].filament_100000001_0.gion_NaxSH10_ChannelML(0.04017303)", 1, 1, 0.8, 0.9, 2)
    graphList[0].append(GraphWin_16)
}

//   This code pops up a plot of a_CellGroup_0[0].filament_100000001_0.gion_Kdr_iAMC_ChannelML(0.04017303)

objref GraphWin_14
GraphWin_14 = new Graph(0)
{GraphWin_14.size(0, tstop,-0.002,0.001)}
{GraphWin_14.view(0, -0.002, tstop, 0.003, 80, 330, 330, 250)}
{
    GraphWin_14.addexpr("a_CellGroup_0[0].filament_100000001_0.gion_Kdr_iAMC_ChannelML", "a_CellGroup_0[0].filament_100000001_0.gion_Kdr_iAMC_ChannelML(0.04017303)", 1, 1, 0.8, 0.9, 2)
    graphList[0].append(GraphWin_14)
}

//   This code pops up a plot of a_CellGroup_0[0].filament_100000001_0.gion_KA_iAMC_ChannelML(0.04017303)

{
    GraphWin_14.addexpr("a_CellGroup_0[0].filament_100000001_0.gion_KA_iAMC_ChannelML", "a_CellGroup_0[0].filament_100000001_0.gion_KA_iAMC_ChannelML(0.04017303)", 2, 1, 0.8, 0.9, 2)
    graphList[0].append(GraphWin_14)
}

//   This code pops up a plot of a_CellGroup_0[0].filament_100000001_0.gion_BK_IAMC_ChannelML(0.04017303)

objref GraphWin_1
GraphWin_1 = new Graph(0)
{GraphWin_1.size(0, tstop,-0.025,0.025)}
{GraphWin_1.view(0, -0.025, tstop, 0.05, 80, 330, 330, 250)}
{
    GraphWin_1.addexpr("a_CellGroup_0[0].filament_100000001_0.gion_BK_IAMC_ChannelML", "a_CellGroup_0[0].filament_100000001_0.gion_BK_IAMC_ChannelML(0.04017303)", 1, 1, 0.8, 0.9, 2)
    graphList[0].append(GraphWin_1)
}

//   This code pops up a plot of a_CellGroup_0[0].filament_100000001_0.gion_CaV_R_iAMC_ChannelML(0.04017303)

{
    GraphWin_1.addexpr("a_CellGroup_0[0].filament_100000001_0.gion_CaV_R_iAMC_ChannelML", "a_CellGroup_0[0].filament_100000001_0.gion_CaV_R_iAMC_ChannelML(0.04017303)", 2, 1, 0.8, 0.9, 2)
    graphList[0].append(GraphWin_1)
}

//////////////////////////////////////////////////////////////////////
//   This will run a full simulation of 400001 steps when the hoc file is executed
//////////////////////////////////////////////////////////////////////


//  Recording 2 variable(s)

objref v_time
objref f_time
objref propsFile

v_time = new Vector()
{ v_time.record(&t) }
{ v_time.resize(400001) } // false
f_time = new File()


//  Saving VOLTAGE on only one seg, id: 0, in the only cell in CellGroup_0


//  Creating vector for segment: filament_100000001_0__0(ID: 0)

objref v_CellGroup_0_seg_filament_100000001_0__0_v[1]
for i=0, 0 {
    { v_CellGroup_0_seg_filament_100000001_0__0_v[i] = new Vector() }
    { v_CellGroup_0_seg_filament_100000001_0__0_v[i].record(&a_CellGroup_0[i].filament_100000001_0.v(0.04017303))} 
    { v_CellGroup_0_seg_filament_100000001_0__0_v[i].resize(400001) }
}
objref f_CellGroup_0_seg_filament_100000001_0__0_v[1]


//  Saving NaP_iAMC_ChannelML:COND_DENS:na on only one seg, id: 0, in only cell: 0 in CellGroup_0


//  Creating vector for segment: filament_100000001_0__0(ID: 0) in cell number: 0

objref v_CellGroup_0_cn0_seg_filament_100000001_0__0_gion_NaP_iAMC_ChannelML
{ v_CellGroup_0_cn0_seg_filament_100000001_0__0_gion_NaP_iAMC_ChannelML = new Vector() }
{ v_CellGroup_0_cn0_seg_filament_100000001_0__0_gion_NaP_iAMC_ChannelML.record(&a_CellGroup_0[0].filament_100000001_0.gion_NaP_iAMC_ChannelML(0.04017303)) }
{ v_CellGroup_0_cn0_seg_filament_100000001_0__0_gion_NaP_iAMC_ChannelML.resize(400001) }
objref f_CellGroup_0_cn0_seg_filament_100000001_0__0_gion_NaP_iAMC_ChannelML

strdef simReference
simReference = "Sim_11"



strdef simsDir
simsDir = "/home/Simon/Channel_Kinetics/AccessoryOlfactoryBulb/MitralCell/neuroConstruct/AOB_MC_Single_Channel_Tests/simulations/"


//  Note: to change location of the generated simulation files, just change value of targetDir
//  e.g. targetDir="" or targetDir="aSubDir/"

strdef targetDir
{ sprint(targetDir, "%s%s/", simsDir, simReference)}


//  Single simulation run...

strdef date
// Note: not showing date/time of start/stop of simulation. This requires Cygwin to be installed// which includes the "date" unix command. Install under c:\cygwin

setuptime = stopsw()

print "Setup time for simulation: ",setuptime," seconds"

print "Starting simulation of duration ",tstop,"ms, dt: ",dt,"ms, reference: ",simReference,""

{currenttime = startsw()}
//////////////////////////////////////////////////////////////////////
//   Main run statement
//////////////////////////////////////////////////////////////////////

{run()}

{realruntime = startsw() - currenttime}
print "Finished simulation in ", realruntime ,"seconds"

print "Storing the data..."

strdef timeFilename

//  Saving VOLTAGE on only one seg, id: 0, in the only cell in CellGroup_0


//  Saving vector for segment: filament_100000001_0__0(ID: 0)

for i=0, 0 {
    f_CellGroup_0_seg_filament_100000001_0__0_v[i] = new File()
    strdef filename
    {sprint(filename, "%sCellGroup_0_%d.dat", targetDir, i)}
    f_CellGroup_0_seg_filament_100000001_0__0_v[i].wopen(filename)
    v_CellGroup_0_seg_filament_100000001_0__0_v[i].printf(f_CellGroup_0_seg_filament_100000001_0__0_v[i])
    f_CellGroup_0_seg_filament_100000001_0__0_v[i].close()
}


//  Saving NaP_iAMC_ChannelML:COND_DENS:na on only one seg, id: 0, in only cell: 0 in CellGroup_0


//  Saving vector for segment: filament_100000001_0__0(ID: 0) in cell number: 0

f_CellGroup_0_cn0_seg_filament_100000001_0__0_gion_NaP_iAMC_ChannelML = new File()
strdef filename
{sprint(filename, "%sCellGroup_0_%d.NaP_iAMC_ChannelML_COND_DENS_na.dat", targetDir, 0)}
{f_CellGroup_0_cn0_seg_filament_100000001_0__0_gion_NaP_iAMC_ChannelML.wopen(filename)}
{v_CellGroup_0_cn0_seg_filament_100000001_0__0_gion_NaP_iAMC_ChannelML.printf(f_CellGroup_0_cn0_seg_filament_100000001_0__0_gion_NaP_iAMC_ChannelML)}
{f_CellGroup_0_cn0_seg_filament_100000001_0__0_gion_NaP_iAMC_ChannelML.close()}


{ sprint(timeFilename, "%s%s", targetDir, "time.dat")}
{ f_time.wopen(timeFilename) }
{ v_time.printf(f_time) }
{ f_time.close() }

{savetime = stopsw()}

propsFile = new File()
strdef propsFilename
{sprint(propsFilename, "%ssimulator.props", targetDir)}
{propsFile.wopen(propsFilename)}
{propsFile.printf("#This is a list of properties generated by NEURON during the simulation run\n")}
{propsFile.printf("Host=%s\n", host)}
{propsFile.printf("RealSimulationTime=%g\n", realruntime)}
{propsFile.printf("SimulationSaveTime=%g\n", savetime)}
{propsFile.printf("SimulationSetupTime=%g\n", setuptime)}
{propsFile.printf("NEURONversion=%s\n", nrnversion())}
{propsFile.close()}

print "Data stored in ",savetime, "secs in directory: ", targetDir


//   This code pops up a simple Run Control

{
xpanel("RunControl", 0)
v_init = -60.0
xbutton("Init & Run","run()")
xbutton("Stop","stoprun=1")
t = 0
xvalue("t","t", 2 )
tstop = 10000.0
xvalue("Tstop","tstop", 1,"tstop_changed()", 0, 1 )
dt = 0.025
 xvalue("dt","dt", 1,"setdt()", 0, 1 )
xpanel(80,80)
}

